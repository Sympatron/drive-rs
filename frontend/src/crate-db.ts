/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Category =
  | ("Timer" | "Timer::RTC")
  | "Analog"
  | "Analog::ADC"
  | "Analog::DAC"
  | "Sensor"
  | "Sensor::PowerMeter"
  | "Sensor::Accelerometer"
  | "Sensor::Gyroscope"
  | "Sensor::Magnetometer"
  | "IoExpander"
  | "IoExpander::PWM"
  | "Actor"
  | "Actor::MotorController"
  | "Display"
  | "Display::OLED";
export type ShortDependency = string;
export type Connection = "StemmaQt" | "MikroBus";
export type BoardManufacturer = "Adafruit" | "Sparkfun" | "Mikroe" | "BBC";
export type Package = string;

export interface FullCrateDb {
  crates: FullCrate[];
  indexes: Indexes;
}

export interface FullCrate {
  description: string;
  /**
   * Functionalities this driver provides
   */
  categories?: Category[];
  crate_size?: number | null;
  created_at: string;
  /**
   * Links to datasheets of chips that are supported by this driver
   */
  datasheets?: string[];
  dependencies: ShortDependency[];
  dev_boards?: DevBoard[];
  documentation?: string | null;
  downloads: number;
  homepage?: string | null;
  interfaces?: Interfaces;
  /**
   * Names of KiCAD symbold for chips this driver supports
   */
  kicad_symbol?: string[];
  license: string;
  /**
   * Manufacturer that produces devices supported by this driver
   */
  manufacturer:
    | (
        | "AnalogDevices"
        | "TI"
        | "NXP"
        | "Toshiba"
        | "SolomonSystech"
        | "Unknown"
      )
    | "ST";
  name: string;
  /**
   * Names of the chips this driver supports
   */
  names: string[];
  /**
   * Packages or footprints in which chips are available
   */
  packages?: Package[];
  /**
   * Part numbers of chips this driver supports
   */
  part_numbers?: string[];
  repository?: string | null;
  resources?: Resource[];
  rust_version?: string | null;
  this_version_downloads: number;
  updated_at: string;
  version: string;

  [k: string]: unknown;
}

export interface DevBoard {
  connections: Connection[];
  link: string;
  manufacturer: BoardManufacturer;
  name: string;

  [k: string]: unknown;
}

export interface Interfaces {
  /**
   * Information about the I2C interface (if present)
   */
  i2c?: I2C | null;
  /**
   * Information about the SPI interface (if present)
   */
  spi?: Spi | null;
}

export interface I2C {
  /**
   * Addresses that can be used by this device
   */
  addrs: number[];
  /**
   * Does this device have an interrupt line?
   */
  interrupt: boolean;
}

export interface Spi {
  /**
   * Whether this device can be used on a shared bus or only on an exclusive device
   */
  bus_type: "SpiBus" | "SpiDevice";
  /**
   * Does this device have an interrupt line?
   */
  interrupt: boolean;
}

export interface Resource {
  title: string;
  link: string;
}

export interface Indexes {
  category: IndexFor_Category;
  dependencies: IndexForString;
  has_dev_board: number[];
  has_kicad: number[];
  interfaces: IndexFor_Interface;
  license: IndexForString;
  package: IndexFor_PackageType;
  rust_version: IndexForString;

  [k: string]: unknown;
}

export interface IndexFor_Category {
  [k: string]: number[];
}

export interface IndexForString {
  [k: string]: number[];
}

export interface IndexFor_Interface {
  [k: string]: number[];
}

export interface IndexFor_PackageType {
  [k: string]: number[];
}
